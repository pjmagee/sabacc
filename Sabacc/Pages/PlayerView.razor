@page "/sessions/{SessionId:guid}/player"
@using Microsoft.AspNetCore.SignalR.Client
@using Sabacc.Domain
@using Sabacc.Hubs

<PageTitle>Player</PageTitle>
@inject SabaccSessionService _sabaccSessionService
@inject BrowserStorage _browserStorage
@inject NavigationManager _navigationManager

@if (Model is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm mb-4 caption-top">
        <caption>Monitor</caption>
        <thead>
            <tr>
                <th>Rounds</th>
                <th>Phase</th>
                <th>Players turn</th>
                <th>Current dealer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Model.Rounds</td>
                <td>@Model.Me.Phase</td>
                <td>@Model.PlayersTurn</td>
                <td>@Model.CurrentDealer</td>
            </tr>
        </tbody>
    </table>

    <table class="table table-sm mb-4 caption-top">
        <caption>The players</caption>
        <thead>
            <tr>
                <th>Turn</th>
                <th>Dealer</th>
                <th>Player</th>
                <th>Cards</th>
                <th>Credits</th>
                <th>Last choice action</th>
                <th>Last bet action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in Model.Players)
            {
                <tr class="@((player.IsTurn && player.Id == Model.Me.Id) ? "table-success" : string.Empty)">
                    <td>@(player.IsTurn ? "➡️" : string.Empty)</td>
                    <td>@(player.IsDealer ? "🤵" : string.Empty)</td>
                    <td>@player.Id</td>
                    <td>@(string.Join(" ", Enumerable.Range(0, player.Cards).Select(x => "🎴")))</td>
                    <td>@player.Credits</td>
                    <td>@player.LastChoice</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-sm mb-4 caption-top">
        <caption>Decks of cards</caption>
        <thead>
            <tr>
                <th>Deck</th>
                <th>Cards</th>
                <th>Top Card</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deck in Model.Decks)
            {
                <tr>
                    <td>@deck.Name</td>
                    <td>@deck.Total</td>
                    <td>@(deck.TopCard ?? string.Empty)</td>
                    <td>
                        @if (deck.DeckType == DeckType.Draw && Model.CanGainOption1())
                        {
                            <button class="btn btn-primary me-2" @onclick="e => GainOption1()">Gain Option 1</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table mb-4 caption-top">
        <caption>Credit Pots</caption>
        <thead>
            <tr>
                <th>Pot</th>
                <th>Sum</th>
                <th>Contributions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pot in Model.Pots)
            {
                <tr>
                    <td>@(pot.PotType == PotType.TheHand ? "Hand Pot" : "Sabacc Pot")</td>
                    <td>@pot.Total</td>
                    <th>
                        @if (pot.Contributions.Any())
                        {
                            <table class="table table-sm">
                                <tbody>
                                    @foreach (var contribution in pot.Contributions)
                                    {
                                        <tr>
                                            <td>@contribution.Key</td>
                                            <td>@contribution.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </th>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-sm mb-4 caption-top">
        <caption>Your hand</caption>
        <thead>
            <tr>
                <th>Value</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Model.Me.Hand.Any())
            {
                <tr class="table-info">
                    <td colspan="2">
                        You have no cards
                    </td>
                </tr>
            }
            else
            {
                foreach (var card in Model.Me.Hand)
                {
                    <tr>
                        <td>@card.ToString()</td>
                        <td>
                            @if (Model.CanSwap())
                            {
                                <button class="btn btn-primary me-2" @onclick="(e => Swap(card.Id))">
                                    Swap
                                </button>
                            }

                            @if (Model.CanKeepOrDiscard(card))
                            {
                                <button class="btn btn-primary me-2" @onclick="(e => GainOption1Keep(card.Id))">
                                    Keep
                                </button>
                                <button class="btn btn-primary me-2" @onclick="(e => GainOption1Discard(card.Id))">
                                    Discard
                                </button>
                            }

                            @if (Model.CanGainOption2())
                            {
                                <button class="btn btn-primary me-2" @onclick="(e => GainOption2(card.Id))">
                                    Gain Option 2
                                </button>
                            }
                        </td>
                    </tr>
                }

                <tr>
                    <td class="table-info">
                        Total: @Model.Me.Hand.Sum(x => x.Value)
                    </td>
                    <td>
                        @if (Model.CanStand())
                        {
                            <button class="btn btn-primary" @onclick="(e => Stand())">Stand</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-sm mb-4 caption-top">
        <caption>Betting options</caption>
        <thead>
            <tr>
                <th>Action</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
        @if (Model.Me.Phase == Phase.Bet)
        {
            <tr>
                <td><button class="btn btn-primary btn-sm">Check</button></td>
                <td>Place no bets and stay in the game.</td>
            </tr>
            <tr>
                <td><button class="btn btn-primary btn-sm me-2">Bet</button><input type="number"/></td>
                <td>Place a bet by adding credits to the hand pot. Other players must Call, Raise or Junk</td>
            </tr>
            <tr>
                <td><button class="btn btn-primary btn-sm me-2">Call</button></td>
                <td>Match the highest bet, placing the credits into the Hand pot.</td>
            </tr>
            <tr>
                <td><button class="btn btn-primary btn-sm me-2">Raise</button><input type="number"/></td>
                <td>Match the highest bet, placing the credits into the Hand pot.</td>
            </tr>
            <tr>
                <td><button class="btn btn-primary btn-sm me-2">Junk</button></td>
                <td>Forfiet winnings for the round. Place all your cards onto the discard pile.</td>
            </tr>
        }
        </tbody>
    </table>

    <table class="table table-sm mb-4 caption-top">
        <caption>Choosing in phase 1</caption>
        <thead>
            <tr>
                <th>Choice</th>
                <th>Cost</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>

            <tr>
                <td>Stand</td>
                <td>0 cr</td>
                <td>Retain your hand and end your turn.</td>
            </tr>
            <tr>
                <td>Swap</td>
                <td>2 cr to the hand pot</td>
                <td>Take the top card from the discard pile and add it to your hand, then discard a different card from your hand.</td>
            </tr>
            <tr>
                <td>Gain - Option 1</td>
                <td>1 cr to the hand Pot</td>
                <td>Draw the top card from the main deck. You may keep it or discard it</td>
            </tr>
            <tr>
                <td>Gain - Option 2</td>
                <td>1 cr to the hand pot</td>
                <td>Discard a card from your hand, then draw the top card from the main deck.</td>
            </tr>
        </tbody>
    </table>
}

@code {

    private HubConnection? hubConnection;

    private PlayerViewModel? Model = null;

    [Parameter]
    public Guid SessionId { get; set; }

    public Guid PlayerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/update"))
            .Build();

        hubConnection.On<Guid>(PlayerNotificationHub.Method, async (sessionId) =>
        {
            if (sessionId.Equals(SessionId))
            {
                Model = await _sabaccSessionService.GetPlayerView(SessionId, PlayerId);
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task Stand()
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Stand;

        var action = new PlayerAction()
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            PlayerId = await _browserStorage.GetPlayerId();

            if (_sabaccSessionService.IsValidPlayer(SessionId, PlayerId))
            {
                Model = await _sabaccSessionService.GetPlayerView(SessionId, PlayerId);
                StateHasChanged();
            }
            else
            {
                _navigationManager.NavigateTo($"/sessions/{SessionId}");
            }
        }
    }

    private async Task GainOption2(Guid cardId)
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Gain2;
        Model!.Me.ActionState.PhaseOne.Gain2Discard = cardId;

        var action = new PlayerAction
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne,
                Phase = Phase.Choose
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

    private async Task GainOption1()
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Gain1;
        Model!.Me.ActionState.PhaseOne.Gain1DrawnCardId = null;

        var action = new PlayerAction()
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne,
                Phase = Phase.Choose
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

    private async Task GainOption1Discard(Guid cardId)
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Gain1;
        Model!.Me.ActionState.PhaseOne.Gain1DiscardCardId = cardId;

        var action = new PlayerAction
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne,
                Phase = Phase.Choose
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

    private async Task GainOption1Keep(Guid cardId)
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Gain1;
        Model!.Me.ActionState.PhaseOne.Gain1KeepCardId = cardId;

        var action = new PlayerAction
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne,
                Phase = Phase.Choose
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

    private async Task Swap(Guid cardId)
    {
        Model!.Me.ActionState.PhaseOne.Choice = PhaseOneChoice.Swap;
        Model!.Me.ActionState.PhaseOne.SwapCardId = cardId;

        var action = new PlayerAction
            {
                PlayerId = PlayerId,
                SessionId = SessionId,
                PhaseOne = Model.Me.ActionState.PhaseOne,
                Phase = Phase.Choose
            };

        await _sabaccSessionService.SubmitTurn(SessionId, PlayerId, action);
    }

}
